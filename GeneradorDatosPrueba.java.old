package com.facu.simulation.ui;

import com.facu.simulation.dto.FilaVectorDTO;
import com.facu.simulation.dto.ResultadosSimulacionDTO;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Utilidad para generar datos de prueba para la tabla mejorada
 */
public class GeneradorDatosPrueba {
    
    /**
     * Genera datos de prueba para mostrar en la tabla
     */
    public static ResultadosSimulacionDTO generarDatosPrueba(int cantidadMuelles, int cantidadGruas) {
        List<FilaVectorDTO> filas = new ArrayList<>();
        
        // Generar algunas filas de ejemplo
        for (int i = 0; i < 20; i++) {
            FilaVectorDTO fila = new FilaVectorDTO(cantidadMuelles, cantidadGruas);
            
            // Alternar entre eventos
            if (i % 2 == 0) {
                fila.setEvento("LlegadaBarco");
            } else {
                fila.setEvento("FinDescarga");
            }
            
            fila.setReloj(String.format("%.2f", 5.0 + i * 0.5));
            
            // Datos de llegada
            if (i % 2 == 0) {
                fila.setRndLlegada(String.format("%.4f", Math.random()));
                fila.setTiempoLlegada(String.format("%.2f", 5.0 + (i + 1) * 0.5));
            }
            
            // Estados de muelles
            for (int m = 0; m < cantidadMuelles; m++) {
                fila.getEstadosMuelles()[m] = (i + m) % 3 == 0 ? "LIBRE" : "OCUPADO";
            }
            
            // Estados de grúas
            for (int g = 0; g < cantidadGruas; g++) {
                fila.getEstadosGruas()[g] = (i + g) % 2 == 0 ? "LIBRE" : "OCUPADO";
            }
            
            // Cola
            fila.setCola(String.valueOf(i % 3));
            
            // Estadísticas
            fila.setAcPermanencia(String.format("%.2f", i * 1.5));
            fila.setBarcos(String.valueOf(i));
            
            filas.add(fila);
        }
        
        // Crear estadísticas de prueba
        double[] utilizacionMuelles = new double[cantidadMuelles];
        double[] utilizacionGruas = new double[cantidadGruas];
        
        for (int i = 0; i < cantidadMuelles; i++) {
            utilizacionMuelles[i] = 60.0 + (i * 10);
        }
        
        for (int i = 0; i < cantidadGruas; i++) {
            utilizacionGruas[i] = 70.0 + (i * 15);
        }
        
        return new ResultadosSimulacionDTO(
            filas,
            2.5,  // tiempo medio
            0.5,  // tiempo mínimo
            5.0,  // tiempo máximo
            25,   // barcos generados
            20,   // barcos atendidos
            15.0, // tiempo final
            utilizacionMuelles,
            utilizacionGruas
        );
    }
    
    /**
     * Crea y muestra una ventana de prueba con la tabla mejorada
     */
    public static void mostrarPrueba() {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Prueba - Tabla Mejorada");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            
            // Crear tabla mejorada
            TablaMejorada tabla = new TablaMejorada(2, 2);
            
            // Generar datos de prueba
            ResultadosSimulacionDTO datos = generarDatosPrueba(2, 2);
            
            // Poblar tabla
            for (FilaVectorDTO fila : datos.getFilasTabla()) {
                tabla.getModelo().addRow(fila.toTableRow());
            }
            
            // Actualizar vista
            tabla.actualizarVista();
            
            frame.add(tabla);
            frame.setSize(1200, 600);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
    
    // Método main para pruebas
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        mostrarPrueba();
    }
}
